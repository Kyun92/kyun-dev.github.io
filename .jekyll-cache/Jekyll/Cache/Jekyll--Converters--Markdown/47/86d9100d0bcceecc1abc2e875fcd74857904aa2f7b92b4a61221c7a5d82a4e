I"8	<p>자바스크립트에서 같은 동작을 하는 함수가 존재하더라도 타입에 따라 다른 결과가 나오는 경우가 있다. 더하기 함수에서 우리는 인자를 number 만 받던지 string만 받던지 정하고 싶다고 하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    const a = {
    	add: (a: number, b: number): number =&gt; a + b,
    	add: (a: string, b: string): string =&gt; a + b
    }

    // 함수명 중복 발생
</code></pre></div></div>

<p>위 함수는 같은 동작을 하지만, 인자의 타입에 따라 다른 타입을 뽑아내고 싶은 경우가 있다.</p>

<p>하지만 저렇게 같은 이름으로 선언하면 중복됐다고 선언되지 않고 그렇다고 타입을 느슨하게 설정하면</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    const a = {
    	add: (a: number | string, b: number | string): number | string =&gt; a + b,
    }

    // a.add(1 + 'abc') 문제 발생!
</code></pre></div></div>

<p>의도하지 않은 결과가 나올 수도 있다.</p>

<p>이를 방지하기위해 등장한 것이 제네릭 일명 짝맞추기이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    interface object&lt;T&gt; {
    	add: (a: T, b: T) =&gt; T;
    }

    const a: obj&lt;number&gt; = {
    	add:(a, b) =&gt; a + b,
    }

    const b: obj&lt;string&gt; = {
    	add:(a, b) =&gt; a + b,
    }
</code></pre></div></div>

<h2 id="extends---제네릭-제한두기">extends - 제네릭 제한두기</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    interface obj&lt;T extends string&gt; {
    	...
    }
</code></pre></div></div>

<p>이렇게 하면 T를 string으로 제한 할 수 있다. string 자리에는 interface, type 모두 올 수 있다.</p>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/379326d8-3ad4-474c-b057-697d288e0020/_2020-03-20__4.18.46.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/379326d8-3ad4-474c-b057-697d288e0020/_2020-03-20__4.18.46.png" /></p>

<p>→ 제네릭을 이용한 <code class="highlighter-rouge">forEach</code> 함수 구현 <code class="highlighter-rouge">item</code> 의 타입이 자동으로 추론 된다.</p>
:ET