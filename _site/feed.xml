<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kyun</title>
    <description>kyun dev bloh</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 05 Apr 2020 18:04:30 +0900</pubDate>
    <lastBuildDate>Sun, 05 Apr 2020 18:04:30 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>

    
      <item>
        <title>blog Test</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Will&lt;/code&gt; 접두사가 붙은 메소드는 어떤 작업을 작동하기 전에 실행되는 메서드&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Did&lt;/code&gt; 접두사가 붙은 메서드는 어떤 작업을 작동 한 후에 실행되는 메서드&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mount&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt; 이 생성되고 웹 브라우저상에 나타나는 것&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/32bbcdb7-acb2-4534-91bd-a4e121951171/Untitled.png&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/32bbcdb7-acb2-4534-91bd-a4e121951171/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;mount-마운트&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mount&lt;/code&gt; 마운트&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; : 컴포넌트를 새로 만들 때마다 호출되는 클래스 생성자 메서드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDerivedStateFromrops&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; 에 있는 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; 에 넣을 때 사용하는 메서드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redner&lt;/code&gt; : 우리가 준비한 UI를 렌더링 하는 메서드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; : 컴포넌트가 웹 브라우저상에 타나난 후 호출하는 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;update-업데이트&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Update&lt;/code&gt; 업데이트&lt;/h1&gt;

&lt;p&gt;컴포넌트는 다음 네 가지 경우에 업데이트된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; 가 바뀔 때&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; 가 바뀔 때&lt;/li&gt;
  &lt;li&gt;부모 컴포넌트가 리렌더링될 때&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.forceUpdate&lt;/code&gt; 로 강제로 렌더링을 트리거할 때&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 때 실행되는 메서드는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDerivedStateFromProps&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;Props&lt;/code&gt;의 변화에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; 값에도 변화를 주고 싶을 때 사용&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; : 컴포넌트를 리렌더링 할지 말지 결정하는 메서드 → &lt;code class=&quot;highlighter-rouge&quot;&gt;return true or false&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 이면 작업을 중단 ⇒ &lt;code class=&quot;highlighter-rouge&quot;&gt;this.forceUpdate()&lt;/code&gt; 를 실행하면 이 단계를 건너뛴다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; : 컴포넌트를 리렌더링&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getSnapshotBeforeUpdate&lt;/code&gt; : 컴포넌트 변화를 &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt; 에 반영하기 바로 직전에 호출하는 메서드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt; : 컴포넌트의 업데이트 작업이 끝난 후 호출되는 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;unmount-언마운트&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unmount&lt;/code&gt; 언마운트&lt;/h1&gt;

&lt;p&gt;컴포넌트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt; 에서 제거하는 것&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount&lt;/code&gt; : 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import React from 'react';
  import LifeCycle from './LifeCycle';

  function getRandomcolor(params) {
  return '#' + Math.floor(Math.random() \* 16777215).toString(16);
  }

  class App extends React.Component {
  state = {
  color: '#000000'
  }
  handleClick = () =&amp;gt; {
  this.setState({
  color: getRandomcolor()
  })
  }

      render() {
        return (
          &amp;lt;&amp;gt;
            &amp;lt;LifeCycle color={this.state.color} /&amp;gt;
            &amp;lt;button onClick={this.handleClick}&amp;gt;랜덤&amp;lt;/button&amp;gt;
          &amp;lt;/&amp;gt;
        );
      }

  }

  export default App;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import React, { Component } from 'react';

  export default class LifeCycle extends Component {
  state = {
  number: 0,
  color: null
  }

      myRef = null;

      constructor(props) {
        super(props);
        console.log('constructor');
      }

      static getDerivedStateFromProps(nextProps, prevState) {
        console.log('getDerivedStateFromProps');
        if (nextProps.color !== prevState.color) {
          return { color: nextProps.color }
        }
        return null
      }

      componentDidMount() {
        console.log('componentDidMount');
      }

      shouldComponentUpdate(nextProps, nextState) {
        console.log('shouldComponentUpdate', nextProps, nextState);
        return nextState.number &amp;amp; 10 !== 4;
      }

      componentWillUnmount() {
        console.log('componentWillUnmount');
      }

      handleClick = () =&amp;gt; {
        this.setState({
          number: this.state.number + 1
        })
      }

      getSnapshotBeforeUpdate(prevProps, prevState) {
        console.log('getSnapshotBeforeUpdate');
        if (prevProps.color !== this.props.color) {
          return this.myRef.style.color;
        }
        return null
      }

      componentDidUpdate(prevProps, prevState, snapshot) {
        console.log('componentDidUpdate', prevProps, prevState);
        if (snapshot) {
          console.log('업데이트되지 직전 색상', snapshot);
        }
      }
      render() {
        console.log('render');
        const style = {
          color: this.props.color
        }

        return (
          &amp;lt;div&amp;gt;
            &amp;lt;h1 style={style} ref={ref =&amp;gt; this.myRef = ref}&amp;gt;{this.state.number}&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;color : {this.state.color}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={this.handleClick}&amp;gt;더하기&amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        )
      }

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/05/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/05/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8/</guid>
      </item>
    
      <item>
        <title>리액트 배우기</title>
        <description>&lt;h1 id=&quot;로드맵&quot;&gt;로드맵&lt;/h1&gt;

&lt;h2 id=&quot;jses6--react-개념--hooks--redux--redux-saga&quot;&gt;JS(ES6) → React 개념 → Hooks → Redux → Redux-saga&lt;/h2&gt;

&lt;p&gt;이 순서가 거의 국룰&lt;/p&gt;

&lt;p&gt;saga는 몰라도 Redux까지는 아는게 좋음&lt;/p&gt;

&lt;p&gt;그 다음 배울건 Typescript 인데 이건 다 배우고 배워도 되고&lt;/p&gt;

&lt;p&gt;보통 프론트엔드 공고를 보면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ES6 이해하는자&lt;/li&gt;
  &lt;li&gt;javascript 프레임워크(react, vue, angular 등) 사용해본 경험&lt;/li&gt;
  &lt;li&gt;redux, mobx 등 상태관리를 이해하고&lt;/li&gt;
  &lt;li&gt;redux-saga, redux-thunk 등 미들웨어에 대한 이해 및 사용해본 경험&lt;/li&gt;
  &lt;li&gt;typescript 경험자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;머 이 딴식인데 redux까지만 알면 그래도 신입은 알건 다 아는거라 생각함&lt;/p&gt;

&lt;h1 id=&quot;리액트-책&quot;&gt;리액트 책&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/78233628?Acode=101&quot;&gt;리액트를 다루는 기술&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;내가 말한 저 코스가 다 들어가있는 책 이거 한 권 사서 쭉 따라해보면 무슨 흐름인 줄 알꺼&lt;/p&gt;

&lt;p&gt;중간부터 뜬금없이 백엔드 강의가 좀 있는데 그것도 따라하면 아 이딴식으로 웹 만드는구나 알게됌&lt;/p&gt;

&lt;p&gt;나도 최근에 이걸로 다시 개념 잡았고 이 책은 사서 보는거 강추&lt;/p&gt;

&lt;h1 id=&quot;인강&quot;&gt;인강&lt;/h1&gt;

&lt;h2 id=&quot;리액트-기초&quot;&gt;리액트 기초&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://opentutorials.org/module/4058&quot;&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;생활코딩은 진짜 알기 쉽게 알려줌&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/web-game-React#reviews&quot;&gt;웹 게임을 만들며 배우는 React - 인프런&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;제로초 라는 사람인데 이 사람은 실무적인거까지 알려줘서 좋음 인강을 돈주고 듣는다면 이 사람 커리큘럼 따라가는 것도 괜찮은거 같음&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/p/mastering-react-16&quot;&gt;React 16 마스터하기&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;실전&quot;&gt;실전&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/p/reactjs-fundamentals&quot;&gt;ReactJS로 웹 서비스 만들기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;노마드코더라고 youtube에서 쉽게 볼 수도 있음 공짜 강의들 괜찮음&lt;/p&gt;

&lt;p&gt;유료강의는 안들어봐서 모르겠는데 커뮤니티 사이에서는 평이 좋은듯? 나도 지금 풀코스 하나 사서 들을까 고민중&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[Build a Recipe App With React&lt;/td&gt;
      &lt;td&gt;React Tutorial For Beginners](https://www.youtube.com/watch?v=U9T6YkEDkMo)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;자막 없긴한데 개념 읽고 그냥 저 사람이 치는대로 쭉 따라하다보면 괜차늠&lt;/p&gt;

&lt;p&gt;개념은 알겠는데 머 어떻게 해야하는거야 하면 유튜브에 reactjs 치면 위 같은 라이브 코딩 은근 있음 그냥 따라치다보면 이렇게 작업하는거구나 알게되서 좋음&lt;/p&gt;

&lt;h2 id=&quot;hooks--redux&quot;&gt;hooks &amp;amp; redux&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4M6yI_YrSss&amp;amp;list=PL9FpF_z-xR_F-nxvw-VDld5wcCzYmSnrW&quot;&gt;react-redux 에서 Hooks 사용하기 (1) 작업환경 준비&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이건 블로그에 글도 있어서 좋음&lt;/p&gt;

&lt;h1 id=&quot;블로그&quot;&gt;블로그&lt;/h1&gt;

&lt;p&gt;velopert 이 사람이 거의 React 권위자 강의도 많고 책도 좋고&lt;/p&gt;

&lt;p&gt;velog 사이트는 velopert가 만든 개발자 통합 블로그 좋은 글도 많아서 보면 도움 많이됨&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://velog.io/@velopert&quot;&gt;velopert (Minjun Kim) - velog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://velopert.com/reactjs-tutorials&quot;&gt;[React.JS] 강좌 목록&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;좀 옛날 강좌인데 이런게 리액트구나 알게되는 강좌. 나도 이걸로 처음 배움, todo-list 만드는거 까지 하면 좋아&lt;/p&gt;

&lt;p&gt;그런데 보면 class component로 하는데 요즘은 Hooks 쓰는게 대세&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://velog.io/@velopert/react-hooks&quot;&gt;리액트의 Hooks 완벽 정복하기&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;내가-처음-배운다고-생각하면&quot;&gt;내가 처음 배운다고 생각하면&lt;/h1&gt;

&lt;p&gt;처음에는 Todo 리스트는 만들 수 있어야하고 외부 api 데이터 받아서 view에 표시하는거를 목표로 쭉 달리면 돼&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;일단 이거 쭉 읽고 Todo-list(흔하디 흔한 할 일 목록)까지 따라하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://velopert.com/reactjs-tutorials&quot;&gt;[React.JS] 강좌 목록&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;React 기초 강의 보기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/web-game-React#reviews&quot;&gt;웹 게임을 만들며 배우는 React - 인프런&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;실제 프로젝트 따라해보기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/p/reactjs-fundamentals&quot;&gt;ReactJS로 웹 서비스 만들기&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;React 좀 알겠다 싶으면 Redux 배우기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;혹은&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/78233628?Acode=101&quot;&gt;리액트를 다루는 기술&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이거 사서 쭉 따라하기 인데&lt;/p&gt;

&lt;p&gt;책은 읽다보면 의욕 떨어지고 기계대로 코드 따라치고 있는 느낌 받을 수 있음 인강 쪽으로 개념 잡고 책으로 개념 정리한다는 느낌으로 쭉 읽고 따라하는게 좋다고 생각함&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/05/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%B0%B0%EC%9A%B0%EA%B8%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/05/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%B0%B0%EC%9A%B0%EA%B8%B0/</guid>
      </item>
    

    
      
        
      
    
      
        
          <item>
            <title>About</title>
            <description>&lt;p&gt;You love Minimalism, and you also love writing, Type is designed for you. Type focus on showing your content in a clean and simple way, focus on images, typography, and white space.&lt;/p&gt;

&lt;p&gt;This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyllrb.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, vix ut case porro facilisis, alia possit neglegentur vis te. Has cu eirmod abhorreant, vel civibus efficiantur cu. Eu summo elitr vix, iusto putant maluisset per ut, ne etiam vivendum adipisci vel. Vis omnis tempor accusam ei, justo perpetua liberavisse cu qui. Saperet aliquando adipiscing ius ne, ne facer euripidis est. Pro mundi nostrum suavitate et.&lt;/p&gt;
</description>
            <link>http://localhost:4000/about.html</link>
          </item>
        
      
    
      
    
      
    
      
        
          <item>
            <title>Style Guide</title>
            <description>At [Aspire Themes](http://aspirethemes.com/) I use a lot of tools to help me create WordPress, Ghost and Jekyll themes. Tools will range from development, design, services, hosting and automation.

Graphic design is the paradise of individuality, eccentricity, heresy, abnormality, hobbies, and humors. - George Santayana.

---

# Simple default styles for headings

## Simple default styles for headings

### Simple default styles for headings

#### Simple default styles for headings

##### Simple default styles for headings

###### Simple default styles for headings

---

* Ut at interdum nunc. Maecenas commodo turpis quis elementum gravida.
* Nunc ac sapien tellus. Quisque risus enim, tempus eget porttitor.
* Donec nibh massa, rutrum a sollicitudin eu, lacinia in lorem.

---

1. Ut at interdum nunc. Maecenas commodo turpis quis elementum gravida.
2. Nunc ac sapien tellus. Quisque risus enim, tempus eget porttitor in.
3. Donec nibh massa, rutrum a sollicitudin eu.

---

&gt; Graphic design is the paradise of individuality, eccentricity, heresy, abnormality, hobbies, and humors. - George Santayana

---

{% highlight js %}
'use strict';
var markdown = require('markdown').markdown;
function Editor(input, preview) {
  this.update = function() {
    preview.innerHTML = markdown.toHTML(input.value);
  };
  input.editor = this;
  this.update();
}
{% endhighlight %}

You can add inline code just like this, E.g. `.code { color: #fff; }`

{% highlight css %}
pre {
  background-color: #f4f4f4;
  max-width: 100%;
  overflow: auto;
}
{% endhighlight %}

---

Cras sed sodales enim. Duis nec erat magna. Sed scelerisque pretium mi et [unsplash](https://unsplash.com/) ullamcorper mauris aliquam ornare fringilla. In luctus commodo quam eget posuere.

---

&lt;iframe src=&quot;https://player.vimeo.com/video/97202679&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

---

&lt;iframe src=&quot;https://embed.ted.com/talks/ted_halstead_a_climate_solution_where_all_sides_can_win&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen&gt;&lt;/iframe&gt;

---

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/29738591&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;

---

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;YWvpRo&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;kharrop&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Referral Form&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kharrop/pen/YWvpRo/&quot;&gt;Referral Form&lt;/a&gt; by Kelly Harrop (&lt;a href=&quot;http://codepen.io/kharrop&quot;&gt;@kharrop&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

---

![about](/images/pages/about.jpeg)

---

&lt;input type=&quot;text&quot; placeholder=&quot;I'm an input field!&quot;&gt;

---

&lt;button class='c-btn c-btn--small'&gt;Button&lt;/button&gt;

&lt;button class='c-btn'&gt;Button&lt;/button&gt;

&lt;button class='c-btn c-btn--full'&gt;Button&lt;/button&gt;

{% highlight html %}
&lt;button class='c-btn c-btn--small'&gt;Button&lt;/button&gt;
&lt;button class='c-btn'&gt;Button&lt;/button&gt;
&lt;button class='c-btn c-btn--full'&gt;Button&lt;/button&gt;
{% endhighlight %}
</description>
            <link>http://localhost:4000/style-guide.html</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>