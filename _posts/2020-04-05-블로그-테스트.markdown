---
layout: post
title: blog Test
tags: [frontpage, jekyll, blog]
---

`Will` 접두사가 붙은 메소드는 어떤 작업을 작동하기 전에 실행되는 메서드
`Did` 접두사가 붙은 메서드는 어떤 작업을 작동 한 후에 실행되는 메서드
`Mount` 는 `DOM` 이 생성되고 웹 브라우저상에 나타나는 것

![Untitled](https://user-images.githubusercontent.com/35090976/78525208-7a4f0e80-7811-11ea-8bc3-7dad0e784ffb.png)

# `Mount` 마운트

- `constructor` : 컴포넌트를 새로 만들 때마다 호출되는 클래스 생성자 메서드
- `getDerivedStateFromrops` : `props` 에 있는 값을 `state` 에 넣을 때 사용하는 메서드
- `redner` : 우리가 준비한 UI를 렌더링 하는 메서드
- `componentDidMount` : 컴포넌트가 웹 브라우저상에 타나난 후 호출하는 메서드

# `Update` 업데이트

컴포넌트는 다음 네 가지 경우에 업데이트된다.

1. `props` 가 바뀔 때
2. `state` 가 바뀔 때
3. 부모 컴포넌트가 리렌더링될 때
4. `this.forceUpdate` 로 강제로 렌더링을 트리거할 때

이 때 실행되는 메서드는

- `getDerivedStateFromProps` : `Props`의 변화에 따라 `state` 값에도 변화를 주고 싶을 때 사용
- `shouldComponentUpdate` : 컴포넌트를 리렌더링 할지 말지 결정하는 메서드 → `return true or false`, `false` 이면 작업을 중단 ⇒ `this.forceUpdate()` 를 실행하면 이 단계를 건너뛴다.
- `render` : 컴포넌트를 리렌더링
- `getSnapshotBeforeUpdate` : 컴포넌트 변화를 `DOM` 에 반영하기 바로 직전에 호출하는 메서드
- `componentDidUpdate` : 컴포넌트의 업데이트 작업이 끝난 후 호출되는 메서드

# `unmount` 언마운트

컴포넌트를 `DOM` 에서 제거하는 것

- `componentWillUnmount` : 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드

```
  import React from 'react';
  import LifeCycle from './LifeCycle';

  function getRandomcolor(params) {
  return '#' + Math.floor(Math.random() \* 16777215).toString(16);
  }

  class App extends React.Component {
  state = {
  color: '#000000'
  }
  handleClick = () => {
  this.setState({
  color: getRandomcolor()
  })
  }

      render() {
        return (
          <>
            <LifeCycle color={this.state.color} />
            <button onClick={this.handleClick}>랜덤</button>
          </>
        );
      }

  }

  export default App;
```

```
  import React, { Component } from 'react';

  export default class LifeCycle extends Component {
  state = {
  number: 0,
  color: null
  }

      myRef = null;

      constructor(props) {
        super(props);
        console.log('constructor');
      }

      static getDerivedStateFromProps(nextProps, prevState) {
        console.log('getDerivedStateFromProps');
        if (nextProps.color !== prevState.color) {
          return { color: nextProps.color }
        }
        return null
      }

      componentDidMount() {
        console.log('componentDidMount');
      }

      shouldComponentUpdate(nextProps, nextState) {
        console.log('shouldComponentUpdate', nextProps, nextState);
        return nextState.number & 10 !== 4;
      }

      componentWillUnmount() {
        console.log('componentWillUnmount');
      }

      handleClick = () => {
        this.setState({
          number: this.state.number + 1
        })
      }

      getSnapshotBeforeUpdate(prevProps, prevState) {
        console.log('getSnapshotBeforeUpdate');
        if (prevProps.color !== this.props.color) {
          return this.myRef.style.color;
        }
        return null
      }

      componentDidUpdate(prevProps, prevState, snapshot) {
        console.log('componentDidUpdate', prevProps, prevState);
        if (snapshot) {
          console.log('업데이트되지 직전 색상', snapshot);
        }
      }
      render() {
        console.log('render');
        const style = {
          color: this.props.color
        }

        return (
          <div>
            <h1 style={style} ref={ref => this.myRef = ref}>{this.state.number}</h1>
            <p>color : {this.state.color}</p>
            <button onClick={this.handleClick}>더하기</button>
          </div>
        )
      }

  }
```
